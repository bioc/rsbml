AC_INIT(src/rsbml.h)

: ${R_HOME=`R RHOME`}
if test -z "${R_HOME}"; then
  echo "could not determine R_HOME"
  exit 1
fi
CC=`"${R_HOME}/bin/R" CMD config CC`
CFLAGS=`"${R_HOME}/bin/R" CMD config CFLAGS`
CPPFLAGS=`"${R_HOME}/bin/R" CMD config CPPFLAGS`

# Try pkg-config, which only exists for libsbml >= 3.0.2
# The legacy parameters override the pkg-config results
PKG_CHECK_MODULES(LIBSBML3, [libsbml >= 3.0.2], [LIBSBML3="yes"], [LIBSBML3="no"])

AC_ARG_WITH(libsbml-include,
            AC_HELP_STRING([--with-libsbml-include=PATH], 
              [location of libsbml headers, directory containing 'sbml' directory]),
            [LIBSBML_INCLUDE=$withval])
AC_ARG_WITH(libsbml-lib, 
            AC_HELP_STRING([--with-libsbml-lib=PATH], [location of libsbml library]),
            [LIBSBML_LIBS=$withval])

if test [ -n "${LIBSBML_INCLUDE}" ] ; then
  LIBSBML_CPPFLAGS="-I${LIBSBML_INCLUDE}"
elif test [ -n "${LIBSBML3_CFLAGS}" ]; then
  LIBSBML_CPPFLAGS="${LIBSBML3_CFLAGS}"
else LIBSBML_CPPFLAGS="-I/usr/local/include"
fi
CPPFLAGS="${CPPFLAGS} ${LIBSBML_CPPFLAGS}"

if test [ -n "${LIBSBML_LIBS}" ] ; then
  LIBS="${LIBSBML_LIBS} ${LIBS}"
elif test [ -n "${LIBSBML3_LIBS}" ]; then
  LIBS="${LIBSBML3_LIBS} ${LIBS}"
fi

if test "${LIBSBML3}" != "no"; then
  RSBML_CPPFLAGS="-DLIBSBML3"
else
  AC_CHECK_HEADER([sbml/xml/ParseMessage.h],, 
    AC_MSG_ERROR([Could not find sbml/xml/ParseMessage.h: 
      rsbml requires libsbml from http://www.sbml.org/software/libsbml/
      use --with-libsbml-include or LIBSBML_INCLUDE to specify the include path.]))
  AC_CHECK_LIB([sbml], [SBMLDocument_create],,
    AC_MSG_ERROR([Could not link to libsbml: 
      use --with-libsbml-lib or LIBSBML_LIBS to specify the lib path.]))
fi

## give user option of using SOSlib
AC_ARG_ENABLE(soslib, [  --enable-soslib[=yes|no|system]          Enable SOSLib (simulation) support])

if test "${enable_soslib}" != "no"; then
  if test "${enable_soslib}" == "system";  then
    PKG_CHECK_MODULES(SOSLIB, [libODES >= 1.7.0], [SOSLIB="yes"], [SOSLIB="no"])
  else
    AC_MSG_NOTICE([=== Begin local SOSLib build ===])
    SOURCE_DIR=`pwd`/local
    cd inst/SBML_odeSolver-1.7.0beta
    SOSLIB_CONFIGURE_ARGS="${SOSLIB_CONFIGURE_ARGS} --prefix=${SOURCE_DIR} --without-graphviz --without-grace"
    SOSLIB="no"
    if ./configure ${SOSLIB_CONFIGURE_ARGS} && make && make install; then
        SOSLIB_CFLAGS="-I${SOURCE_DIR}/include"
        SOSLIB_LIBS="-L${SOURCE_DIR}/lib -lODES"
        SOSLIB="yes"
    fi
    cd ../..
    AC_MSG_NOTICE([=== End local SOSLib build ===]) 
  fi
  if test "${SOSLIB}" == "yes"; then
     RSBML_CPPFLAGS="${RSBML_CPPFLAGS} -DSOSLIB ${SOSLIB_CFLAGS}"
     LIBS="${LIBS} ${SOSLIB_LIBS}"
     LIBS="${LIBS} -lsundials_kinsol -lsundials_cvodes -lsundials_nvecserial"
  elif test -n "${enable_soslib}"; then
     AC_MSG_ERROR([SOSLib support requested, but prequisites failed])  
  fi
fi

AC_SUBST(RSBML_CPPFLAGS)
AC_SUBST(LIBSBML_CPPFLAGS)
AC_SUBST(SOSLIB_CPPFLAGS)
AC_SUBST(LIBS)
AC_OUTPUT(src/Makevars)
